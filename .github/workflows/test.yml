name: Test Font Build

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - single-family
        - single-width
  pull_request:
    paths:
      - 'packages/**'
      - 'verdafile.mjs'
      - 'build-plans.toml'
      - 'private-build-plans.toml'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - 'packages/**'
      - 'verdafile.mjs'
      - 'build-plans.toml'
      - 'private-build-plans.toml'

jobs:
  # Job 1: Generate test matrix
  setup:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      families: ${{ steps.matrix.outputs.families }}
      batches: ${{ steps.matrix.outputs.batches }}
      version: ${{ steps.version.outputs.version }}
      test_type: ${{ steps.test-type.outputs.test_type }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies for matrix generation
        run: npm install @iarna/toml

      - name: Determine test type
        id: test-type
        run: |
          if [ "${{ github.event.inputs.test_type }}" != "" ]; then
            echo "test_type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "test_type=quick" >> $GITHUB_OUTPUT
          else
            echo "test_type=single-family" >> $GITHUB_OUTPUT
          fi

      - name: Generate test matrix
        id: matrix
        run: |
          TEST_TYPE="${{ steps.test-type.outputs.test_type }}"

          if [ "$TEST_TYPE" = "quick" ]; then
            # Quick test: Only Regular fonts
            node .github/scripts/generate-test-matrix.js quick > matrix-output.txt
          elif [ "$TEST_TYPE" = "single-family" ]; then
            # Single family: OtoshiMono only, all variants
            node .github/scripts/generate-test-matrix.js single-family > matrix-output.txt
          elif [ "$TEST_TYPE" = "single-width" ]; then
            # Single width: Normal width only, both families
            node .github/scripts/generate-test-matrix.js single-width > matrix-output.txt
          fi

          cat matrix-output.txt

          # Extract the GitHub Actions outputs
          families=$(grep "families=" matrix-output.txt | cut -d'=' -f2-)
          batches=$(grep "batches=" matrix-output.txt | cut -d'=' -f2-)

          echo "families=$families" >> $GITHUB_OUTPUT
          echo "batches=$batches" >> $GITHUB_OUTPUT

      - name: Get Font version
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Upload matrix files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-build-matrix
          path: |
            font-*.json
        continue-on-error: true

  # Job 2: Build test fonts
  build-fonts:
    name: Build Test Fonts (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ttfautohint

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache build artifacts (Test)
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-test-build-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}-batch-${{ matrix.batch }}
          restore-keys: |
            ${{ runner.os }}-test-build-cache-
            ${{ runner.os }}-build-cache-

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: test-build-matrix
          path: ./
        continue-on-error: true

      - name: Build test fonts in batch
        run: |
          # Check if matrix file exists
          if [ -f "font-batches.json" ]; then
            BATCH_FILE="font-batches.json"
          else
            echo "Error: No batch file found"
            echo "Looking for font-batches.json in current directory"
            ls -la font-*.json || echo "No font-*.json files found"
            exit 1
          fi

          # Read the batch information
          BATCH_DATA=$(cat "$BATCH_FILE" | jq ".[] | select(.batchId == ${{ matrix.batch }})")

          echo "Building test batch ${{ matrix.batch }}..."
          echo "$BATCH_DATA" | jq -r '.fonts[].target' | while read target; do
            echo "Building: $target"
            npm run build -- "$target"
          done

      - name: Validate fonts
        run: |
          echo "Validating built fonts..."
          find dist/ -name "*.ttf" -type f | while read -r font_file; do
            echo "Checking: $font_file"
            # Basic font validation
            if [ -f "$font_file" ] && [ -s "$font_file" ]; then
              echo "✓ $font_file is valid (non-empty)"
            else
              echo "✗ $font_file is invalid (empty or missing)"
              exit 1
            fi
          done

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-fonts-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/
          include-hidden-files: true

  # Job 3: Test NerdFont patching (only on a subset)
  test-patch:
    name: Test NerdFont Patching
    runs-on: ubuntu-latest
    needs: [setup, build-fonts]
    if: contains(fromJson(needs.setup.outputs.batches), 1)  # Only test first batch

    steps:
      - name: Download first batch
        uses: actions/download-artifact@v4
        with:
          name: test-fonts-batch-1-${{ needs.setup.outputs.version }}
          path: dist/

      - name: Test NerdFont patching
        run: |
          mkdir -p dist-nerdfont

          # Test patch only the first font found
          first_font=$(find dist/ -name "*.ttf" -type f | head -n 1)
          if [ -n "$first_font" ]; then
            rel_path="${first_font#dist/}"
            output_dir="dist-nerdfont/$(dirname "$rel_path")"
            mkdir -p "$output_dir"

            echo "Test patching: $first_font"
            docker run --rm \
              -v "$PWD/dist:/in:Z" \
              -v "$PWD/dist-nerdfont:/out:Z" \
              nerdfonts/patcher \
              --complete --careful \
              --outputdir "/out/$(dirname "$rel_path")" \
              "/in/$rel_path" || echo "Patch test failed but continuing..."

            # Check if patched font was created
            patched_font="dist-nerdfont/$rel_path"
            if [ -f "$patched_font" ]; then
              echo "✓ NerdFont patching test successful"
            else
              echo "⚠ NerdFont patching test failed"
            fi
          else
            echo "No fonts found to test patching"
          fi

      - name: Upload test patch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-nerdfont-${{ needs.setup.outputs.version }}
          path: |
            dist-nerdfont/
          include-hidden-files: true

  # Job 4: Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup, build-fonts, test-patch]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-fonts-batch-*-${{ needs.setup.outputs.version }}
          path: all-test-fonts/
          merge-multiple: true

      - name: Generate test report
        run: |
          echo "# Font Build Test Report" > test-report.md
          echo "" >> test-report.md
          echo "**Test Type:** ${{ needs.setup.outputs.test_type }}" >> test-report.md
          echo "**Version:** ${{ needs.setup.outputs.version }}" >> test-report.md
          echo "**Date:** $(date)" >> test-report.md
          echo "" >> test-report.md

          echo "## Built Fonts" >> test-report.md
          font_count=$(find all-test-fonts/ -name "*.ttf" -type f | wc -l)
          echo "**Total fonts built:** $font_count" >> test-report.md
          echo "" >> test-report.md

          echo "### Font List" >> test-report.md
          find all-test-fonts/ -name "*.ttf" -type f | sort | while read font; do
            font_name=$(basename "$font")
            font_size=$(stat -c%s "$font" 2>/dev/null || echo "unknown")
            echo "- $font_name (${font_size} bytes)" >> test-report.md
          done

          echo "" >> test-report.md
          echo "## Job Status" >> test-report.md
          echo "- Setup: ${{ needs.setup.result }}" >> test-report.md
          echo "- Build Fonts: ${{ needs.build-fonts.result }}" >> test-report.md
          echo "- Test Patch: ${{ needs.test-patch.result }}" >> test-report.md

          cat test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ needs.setup.outputs.version }}
          path: test-report.md
