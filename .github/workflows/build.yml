name: Font Build and Release

on:
  workflow_dispatch:
    inputs:
      use_persistent_cache:
        description: 'Use persistent cache if available'
        required: false
        default: true
        type: boolean
      save_cache:
        description: 'Save build cache for future builds'
        required: false
        default: false
        type: boolean
  schedule:
    # Save build cache weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  # Job 1: Generate build matrix and manage cache
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      families: ${{ steps.matrix.outputs.families }}
      batches: ${{ steps.matrix.outputs.batches }}
      version: ${{ steps.version.outputs.version }}
      cache_restored: ${{ steps.cache-status.outputs.cache_restored }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies for matrix generation
        run: npm install @iarna/toml

      - name: Generate font build matrix
        id: matrix
        run: |
          node .github/scripts/generate-font-matrix.js > matrix-output.txt
          cat matrix-output.txt

          # Extract the GitHub Actions outputs
          families=$(grep "families=" matrix-output.txt | cut -d'=' -f2-)
          batches=$(grep "batches=" matrix-output.txt | cut -d'=' -f2-)

          echo "families=$families" >> $GITHUB_OUTPUT
          echo "batches=$batches" >> $GITHUB_OUTPUT

      - name: Get Font version
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Upload matrix files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-matrix
          path: |
            .github/font-*.json
            font-*.json
        continue-on-error: true

      # Try to restore persistent cache if enabled
      - name: Restore Build Cache
        id: restore-cache
        if: github.event.inputs.use_persistent_cache != 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for available build cache..."
          if ./.github/scripts/manage-cache.sh restore; then
            echo "cache_restored=true" >> $GITHUB_OUTPUT
            echo "Build cache restored successfully"
          else
            echo "cache_restored=false" >> $GITHUB_OUTPUT
            echo "No cache available or failed to restore"
          fi

      - name: Set cache status
        id: cache-status
        run: |
          cache_restored="${{ steps.restore-cache.outputs.cache_restored }}"
          echo "cache_restored=${cache_restored:-false}" >> $GITHUB_OUTPUT

      - name: Upload restored cache artifacts
        if: steps.restore-cache.outputs.cache_restored == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: restored-cache
          path: |
            .build/
            packages/*/lib/
          retention-days: 1

  # Job 2: Build fonts in parallel batches
  build-fonts:
    name: Build Fonts (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ttfautohint

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Standard build cache
      - name: Cache build artifacts
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-build-cache-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}-batch-${{ matrix.batch }}
          restore-keys: |
            ${{ runner.os }}-build-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}
            ${{ runner.os }}-build-cache-

      # Restore persistent cache if standard cache missed
      - name: Download restored cache artifacts
        if: steps.build-cache.outputs.cache-hit != 'true' && needs.setup.outputs.cache_restored == 'true'
        uses: actions/download-artifact@v4
        with:
          name: restored-cache
          path: ./

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./
        continue-on-error: true

      - name: Build fonts in batch
        run: |
          # Check if matrix files exist
          if [ -f "font-batches.json" ]; then
            BATCH_FILE="font-batches.json"
          elif [ -f ".github/font-batches.json" ]; then
            BATCH_FILE=".github/font-batches.json"
          else
            echo "Error: No batch file found"
            exit 1
          fi

          # Read the batch information
          BATCH_DATA=$(cat "$BATCH_FILE" | jq ".[] | select(.batchId == ${{ matrix.batch }})")

          echo "Building batch ${{ matrix.batch }}..."
          echo "$BATCH_DATA" | jq -r '.fonts[].target' | while read target; do
            echo "Building: $target"
            npm run build -- "$target"
          done

      - name: Upload batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fonts-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/
          include-hidden-files: true

      # Save updated build cache for sharing between batches
      - name: Upload updated build cache
        if: matrix.batch == 1  # Only from first batch to avoid conflicts
        uses: actions/upload-artifact@v4
        with:
          name: updated-build-cache-${{ needs.setup.outputs.version }}
          path: |
            .build/
            packages/*/lib/
          retention-days: 1

  # Job 3: Patch fonts with NerdFonts in parallel
  patch-fonts:
    name: Patch Fonts (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-fonts]
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Download font batch
        uses: actions/download-artifact@v4
        with:
          name: fonts-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: dist/

      - name: Patch fonts with NerdFonts
        run: |
          mkdir -p dist-nerdfont

          # Find all TTF files in this batch and patch them
          find dist/ -name "*.ttf" -type f | while read -r font_file; do
            # Get the relative path from dist/
            rel_path="${font_file#dist/}"
            # Create the output directory structure
            output_dir="dist-nerdfont/$(dirname "$rel_path")"
            mkdir -p "$output_dir"

            echo "Patching: $font_file"
            docker run --rm \
              -v "$PWD/dist:/in:Z" \
              -v "$PWD/dist-nerdfont:/out:Z" \
              nerdfonts/patcher \
              --complete --careful \
              --outputdir "/out/$(dirname "$rel_path")" \
              "/in/$rel_path" || echo "Failed to patch $font_file, continuing..."
          done

      - name: Upload patched batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nerdfont-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist-nerdfont/
          include-hidden-files: true

  # Job 4: Collect and organize all fonts by family
  collect-fonts:
    name: Collect Fonts (${{ matrix.family }})
    runs-on: ubuntu-latest
    needs: [setup, build-fonts, patch-fonts]
    strategy:
      fail-fast: false
      matrix:
        family: ${{ fromJson(needs.setup.outputs.families) }}

    steps:
      - name: Download all font batches
        uses: actions/download-artifact@v4
        with:
          pattern: fonts-batch-*-${{ needs.setup.outputs.version }}
          path: all-fonts/
          merge-multiple: true

      - name: Download all patched font batches
        uses: actions/download-artifact@v4
        with:
          pattern: nerdfont-batch-*-${{ needs.setup.outputs.version }}
          path: all-nerdfont/
          merge-multiple: true

      - name: Organize fonts by family
        run: |
          mkdir -p final-dist/${{ matrix.family }}
          mkdir -p final-nerdfont/${{ matrix.family }}

          # Copy original fonts for this family
          if [ -d "all-fonts/dist/${{ matrix.family }}" ]; then
            cp -r all-fonts/dist/${{ matrix.family }}/* final-dist/${{ matrix.family }}/
          fi

          # Copy patched fonts for this family
          if [ -d "all-nerdfont/dist-nerdfont/${{ matrix.family }}" ]; then
            cp -r all-nerdfont/dist-nerdfont/${{ matrix.family }}/* final-nerdfont/${{ matrix.family }}/
          fi

      - name: Upload family artifacts (Original)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.family }}_${{ needs.setup.outputs.version }}
          path: final-dist/
          include-hidden-files: true

      - name: Upload family artifacts (NerdFont)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.family }}_nerdfont_${{ needs.setup.outputs.version }}
          path: final-nerdfont/
          include-hidden-files: true

  # Job 5: Save build cache
  save-cache:
    name: Save Build Cache
    runs-on: ubuntu-latest
    needs: [setup, build-fonts]
    if: >
      always() &&
      (github.event.inputs.save_cache == 'true' ||
       github.event_name == 'schedule')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download updated build cache
        uses: actions/download-artifact@v4
        with:
          name: updated-build-cache-${{ needs.setup.outputs.version }}
          path: ./
        continue-on-error: true

      - name: Save build cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Saving build cache for future builds..."
          ./.github/scripts/manage-cache.sh save

      - name: Cleanup old cache files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cleaning up old cache files..."
          ./.github/scripts/manage-cache.sh cleanup

  # Job 6: Create release with all fonts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup, collect-fonts]
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download all family artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*_${{ needs.setup.outputs.version }}"
          path: release-artifacts/

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          name: Release v${{ needs.setup.outputs.version }}
          body: |
            # Otoshi Mono Font Release v${{ needs.setup.outputs.version }}

            This release includes:
            - **Original fonts**: Complete font families with all weights, widths, and slopes
            - **NerdFont patched**: Same fonts with additional programming icons and symbols

            ## Font Families
            - **OtoshiMono**: Proportional spacing variant
            - **OtoshiTerm**: Terminal/monospace variant

            Both families include 7 widths × 9 weights × 3 slopes = 189 font files each.

            ## Build Information
            - Built with parallel processing for faster builds
            - Build cache used: ${{ needs.setup.outputs.cache_restored }}
            - Total fonts: 378 individual font files

            Built from commit: ${{ github.sha }}
          files: release-artifacts/**/*
          fail_on_unmatched_files: false
