name: Font Build and Release

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: true
        default: 'complete'
        type: choice
        options:
        - complete
        - single-family

jobs:
  # Job 1: Generate build matrix and prepare environment
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      families: ${{ steps.matrix.outputs.families }}
      batches: ${{ steps.matrix.outputs.batches }}
      version: ${{ steps.version.outputs.version }}
      build_mode: ${{ steps.build-mode.outputs.build_mode }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies for matrix generation
        run: npm install @iarna/toml

      - name: Determine build mode
        id: build-mode
        run: |
          if [ "${{ github.event.inputs.build_mode }}" != "" ]; then
            echo "build_mode=${{ github.event.inputs.build_mode }}" >> $GITHUB_OUTPUT
          else
            echo "build_mode=complete" >> $GITHUB_OUTPUT
          fi

      - name: Generate font build matrix
        id: matrix
        run: |
          BUILD_MODE="${{ steps.build-mode.outputs.build_mode }}"
          node .github/scripts/generate-font-matrix.js "$BUILD_MODE" > matrix-output.txt
          cat matrix-output.txt

          # Extract the GitHub Actions outputs
          families=$(grep "families=" matrix-output.txt | cut -d'=' -f2-)
          batches=$(grep "batches=" matrix-output.txt | cut -d'=' -f2-)

          echo "families=$families" >> $GITHUB_OUTPUT
          echo "batches=$batches" >> $GITHUB_OUTPUT

      - name: Get Font version
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Upload matrix files
        uses: actions/upload-artifact@v4
        with:
          name: build-matrix
          path: |
            font-*.json

  # Job 2: Build unhinted TTF fonts (Stage 1)
  build-unhinted:
    name: Build Unhinted TTF (${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-build-env-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}
          restore-keys: |
            ${{ runner.os }}-build-env-

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./

      - name: Build unhinted TTF fonts
        run: |
          BATCH_DATA=$(cat font-batches.json | jq ".[] | select(.batchId == \"${{ matrix.batch }}\")")
          echo "Building unhinted TTF for ${{ matrix.batch }}..."
          echo "$BATCH_DATA" | jq -r '.families[].targets.unhinted' | while read target; do
            echo "Building: $target"
            npm run build -- "$target"
          done

      - name: Upload unhinted TTF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unhinted-ttf-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/TTF-Unhinted/
          include-hidden-files: true

  # Job 3: Build hinted TTF fonts (Stage 2)
  build-hinted:
    name: Build Hinted TTF (${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-unhinted]
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ttfautohint

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-build-env-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}

      - name: Download unhinted TTF artifacts
        uses: actions/download-artifact@v4
        with:
          name: unhinted-ttf-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: dist/

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./

      - name: Build hinted TTF fonts
        run: |
          BATCH_DATA=$(cat font-batches.json | jq ".[] | select(.batchId == \"${{ matrix.batch }}\")")
          echo "Building hinted TTF for ${{ matrix.batch }}..."
          echo "$BATCH_DATA" | jq -r '.families[].targets.hinted' | while read target; do
            echo "Building: $target"
            npm run build -- "$target"
          done

      - name: Upload hinted TTF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hinted-ttf-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/TTF/
          include-hidden-files: true

  # Job 4: Build WOFF2 fonts (Stage 3)
  build-woff2:
    name: Build WOFF2 (${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-hinted]
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-build-env-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}

      - name: Download hinted TTF artifacts
        uses: actions/download-artifact@v4
        with:
          name: hinted-ttf-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: dist/

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./

      - name: Build WOFF2 fonts
        run: |
          BATCH_DATA=$(cat font-batches.json | jq ".[] | select(.batchId == \"${{ matrix.batch }}\")")
          echo "Building WOFF2 for ${{ matrix.batch }}..."
          echo "$BATCH_DATA" | jq -r '.families[].targets.woff2' | while read target; do
            echo "Building: $target"
            npm run build -- "$target"
          done

      - name: Upload WOFF2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: woff2-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/WOFF2/
          include-hidden-files: true

  # Job 5: Build webfonts with CSS (Stage 4)
  build-webfonts:
    name: Build Webfonts (${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-woff2]
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-build-env-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}

      - name: Download WOFF2 artifacts
        uses: actions/download-artifact@v4
        with:
          name: woff2-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: dist/

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./

      - name: Build webfonts with CSS
        run: |
          BATCH_DATA=$(cat font-batches.json | jq ".[] | select(.batchId == \"${{ matrix.batch }}\")")
          echo "Building webfonts for ${{ matrix.batch }}..."
          echo "$BATCH_DATA" | jq -r '.families[].targets.webfont' | while read target; do
            echo "Building: $target"
            npm run build -- "$target"
          done

      - name: Upload webfont artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webfont-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/
          include-hidden-files: true

  # Job 6: Create NerdFont patches (hinted TTFs only)
  patch-fonts:
    name: Patch Fonts (${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-webfonts]
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Download webfont batch
        uses: actions/download-artifact@v4
        with:
          name: webfont-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: dist/

      - name: Patch fonts with NerdFonts
        run: |
          mkdir -p dist-nerdfont

          # Find only hinted TTF files (exclude TTF-Unhinted directory) and patch them
          find dist/ -path "*/TTF/*.ttf" -type f | while read -r font_file; do
            # Get the relative path from dist/
            rel_path="${font_file#dist/}"
            # Create the output directory structure
            output_dir="dist-nerdfont/$(dirname "$rel_path")"
            mkdir -p "$output_dir"

            echo "Patching hinted TTF: $font_file"
            docker run --rm \
              -v "$PWD/dist:/in:Z" \
              -v "$PWD/dist-nerdfont:/out:Z" \
              nerdfonts/patcher \
              --complete --careful \
              --outputdir "/out/$(dirname "$rel_path")" \
              "/in/$rel_path" || echo "Failed to patch $font_file, continuing..."
          done

      - name: Upload patched batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nerdfont-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist-nerdfont/
          include-hidden-files: true

  # Job 7: Collect and organize all fonts by family
  collect-fonts:
    name: Collect Fonts (${{ matrix.family }})
    runs-on: ubuntu-latest
    needs: [setup, build-webfonts, patch-fonts]
    strategy:
      fail-fast: false
      matrix:
        family: ${{ fromJson(needs.setup.outputs.families) }}

    steps:
      - name: Download all webfont batches
        uses: actions/download-artifact@v4
        with:
          pattern: webfont-*-${{ needs.setup.outputs.version }}
          path: all-fonts/
          merge-multiple: true

      - name: Download all patched font batches
        uses: actions/download-artifact@v4
        with:
          pattern: nerdfont-*-${{ needs.setup.outputs.version }}
          path: all-nerdfont/
          merge-multiple: true

      - name: Organize fonts by family
        run: |
          mkdir -p final-dist/${{ matrix.family }}
          mkdir -p final-nerdfont/${{ matrix.family }}

          # Copy original fonts for this family
          if [ -d "all-fonts/dist/${{ matrix.family }}" ]; then
            cp -r all-fonts/dist/${{ matrix.family }}/* final-dist/${{ matrix.family }}/
          fi

          # Copy patched fonts for this family
          if [ -d "all-nerdfont/dist-nerdfont/${{ matrix.family }}" ]; then
            cp -r all-nerdfont/dist-nerdfont/${{ matrix.family }}/* final-nerdfont/${{ matrix.family }}/
          fi

      - name: Upload family artifacts (Original)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.family }}_${{ needs.setup.outputs.version }}
          path: final-dist/
          include-hidden-files: true

      - name: Upload family artifacts (NerdFont)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.family }}_nerdfont_${{ needs.setup.outputs.version }}
          path: final-nerdfont/
          include-hidden-files: true

  # Job 8: Create release with all fonts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup, collect-fonts]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download all family artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*_${{ needs.setup.outputs.version }}"
          path: release-artifacts/

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          name: Release v${{ needs.setup.outputs.version }}
          body: |
            # Otoshi Mono Font Release v${{ needs.setup.outputs.version }}

            This release includes:
            - **Original fonts**: Complete font families with all weights, widths, and slopes
            - **NerdFont patched**: Hinted TTF fonts with additional programming icons and symbols

            ## Font Families
            ${{ join(fromJson(needs.setup.outputs.families), ', ') }}

            ## Build Information
            - Build mode: ${{ needs.setup.outputs.build_mode }}
            - Built with staged caching for efficient builds
            - All formats included: TTF (hinted/unhinted), WOFF2, and CSS

            Built from commit: ${{ github.sha }}
          files: release-artifacts/**/*
          fail_on_unmatched_files: false
