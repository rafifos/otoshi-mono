name: Font Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        fontFamily:
          - OtoshiMono
          - OtoshiTerm

    name: Build ${{ matrix.fontFamily }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install ttfautohint
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ttfautohint

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get Font version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-artifacts-${{ github.run_id }}-${{ matrix.fontFamily }}
          restore-keys: |
           ${{ runner.os }}-artifacts-

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.fontFamily }}
        run: npm run build -- contents::${{ matrix.fontFamily }}

      - name: Patch fonts with NerdFonts
        run: |
          mkdir -p dist-nerdfont
          # Find all TTF files in the dist directory and patch them individually
          find dist/ -name "*.ttf" -type f | while read -r font_file; do
            # Get the relative path from dist/
            rel_path="${font_file#dist/}"
            # Create the output directory structure
            output_dir="dist-nerdfont/$(dirname "$rel_path")"
            mkdir -p "$output_dir"
            echo "Patching: $font_file"
            docker run --rm \
              -v "$PWD/dist:/in:Z" \
              -v "$PWD/dist-nerdfont:/out:Z" \
              nerdfonts/patcher \
              --complete --careful \
              --outputdir "/out/$(dirname "$rel_path")" \
              "/in/$rel_path"
          done

      - name: Upload Original Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.fontFamily }}_${{ steps.package-version.outputs.current-version}}
          path: dist/
          include-hidden-files: true

      - name: Upload NerdFonts-patched Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.fontFamily }}_nerdfont_${{ steps.package-version.outputs.current-version}}
          path: dist-nerdfont/
          include-hidden-files: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Font version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package-version.outputs.current-version }}
          name: Release v${{ steps.package-version.outputs.current-version }}
          body: "Automated release of Otoshi Mono"
          files: otoshi-mono/artifacts/*
