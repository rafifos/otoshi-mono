name: Multi-Stage Font Build with Caching

on:
  workflow_dispatch:
    inputs:
      use_persistent_cache:
        description: 'Use persistent cache if available'
        required: false
        default: true
        type: boolean
      save_cache:
        description: 'Save build cache for future builds'
        required: false
        default: false
        type: boolean
      skip_stages:
        description: 'Comma-separated stages to skip (unhinted-ttf,hinted-ttf,woff2,webfont)'
        required: false
        default: ''
        type: string
  schedule:
    # Save build cache weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  # Job 1: Setup and Generate Matrix
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      families: ${{ steps.matrix.outputs.families }}
      batches: ${{ steps.matrix.outputs.batches }}
      version: ${{ steps.version.outputs.version }}
      cache_restored: ${{ steps.cache-status.outputs.cache_restored }}
      stages: ${{ steps.stages.outputs.stages }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies for matrix generation
        run: npm install @iarna/toml

      - name: Generate font build matrix
        id: matrix
        run: |
          node .github/scripts/generate-font-matrix.js > matrix-output.txt
          cat matrix-output.txt

          # Extract the GitHub Actions outputs
          families=$(grep "families=" matrix-output.txt | cut -d'=' -f2-)
          batches=$(grep "batches=" matrix-output.txt | cut -d'=' -f2-)

          echo "families=$families" >> $GITHUB_OUTPUT
          echo "batches=$batches" >> $GITHUB_OUTPUT

      - name: Determine build stages
        id: stages
        run: |
          skip_stages="${{ github.event.inputs.skip_stages }}"
          all_stages='["unhinted-ttf","hinted-ttf","woff2","webfont"]'
          
          if [ -n "$skip_stages" ]; then
            # Filter out skipped stages
            stages=$(echo '$all_stages' | jq --arg skip "$skip_stages" '
              . - (($skip | split(",")) as $skip_array | map(select(. as $stage | $skip_array | index($stage) | not)))
            ')
          else
            stages="$all_stages"
          fi
          
          echo "stages=$stages" >> $GITHUB_OUTPUT
          echo "Build stages: $stages"

      - name: Get Font version
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Upload matrix files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-matrix
          path: |
            font-*.json
        continue-on-error: true

      # Try to restore persistent cache if enabled
      - name: Restore Build Cache
        id: restore-cache
        if: github.event.inputs.use_persistent_cache != 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for available build cache..."
          if [ -f ".github/scripts/manage-cache.sh" ] && ./.github/scripts/manage-cache.sh restore; then
            echo "cache_restored=true" >> $GITHUB_OUTPUT
            echo "Build cache restored successfully"
          else
            echo "cache_restored=false" >> $GITHUB_OUTPUT
            echo "No cache available or failed to restore"
          fi

      - name: Set cache status
        id: cache-status
        run: |
          cache_restored="${{ steps.restore-cache.outputs.cache_restored }}"
          echo "cache_restored=${cache_restored:-false}" >> $GITHUB_OUTPUT

      - name: Upload restored cache artifacts
        if: steps.restore-cache.outputs.cache_restored == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: restored-cache
          path: |
            .build/
            packages/*/lib/
          retention-days: 1

  # Stage 1: Build Unhinted TTF
  build-unhinted-ttf:
    name: Build Unhinted TTF (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.stages), 'unhinted-ttf')
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Stage-specific cache for build artifacts
      - name: Cache build artifacts (Stage 1)
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-stage1-cache-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}-batch-${{ matrix.batch }}
          restore-keys: |
            ${{ runner.os }}-stage1-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}
            ${{ runner.os }}-stage1-cache-

      # Restore persistent cache if standard cache missed
      - name: Download restored cache artifacts
        if: steps.build-cache.outputs.cache-hit != 'true' && needs.setup.outputs.cache_restored == 'true'
        uses: actions/download-artifact@v4
        with:
          name: restored-cache
          path: ./

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./
        continue-on-error: true

      - name: Build unhinted TTF fonts in batch
        run: |
          # Check if matrix file exists
          if [ -f "font-batches.json" ]; then
            BATCH_FILE="font-batches.json"
          else
            echo "Error: No batch file found"
            echo "Looking for font-batches.json in current directory"
            ls -la font-*.json || echo "No font-*.json files found"
            exit 1
          fi

          # Read the batch information
          BATCH_DATA=$(cat "$BATCH_FILE" | jq ".[] | select(.batchId == ${{ matrix.batch }})")

          echo "Building Stage 1 - Unhinted TTF (batch ${{ matrix.batch }})..."
          echo "$BATCH_DATA" | jq -r '.families[].family' | while read family; do
            echo "Building unhinted TTF: $family"
            npm run build -- "ttf-unhinted::$family"
          done

      - name: Upload unhinted TTF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unhinted-ttf-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/TTF-Unhinted/
          include-hidden-files: true

      - name: Upload stage 1 build cache
        if: matrix.batch == 1  # Only from first batch to avoid conflicts
        uses: actions/upload-artifact@v4
        with:
          name: stage1-build-cache-${{ needs.setup.outputs.version }}
          path: |
            .build/
            packages/*/lib/
          retention-days: 1

  # Stage 2: Hint TTF Files
  build-hinted-ttf:
    name: Build Hinted TTF (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-unhinted-ttf]
    if: contains(fromJson(needs.setup.outputs.stages), 'hinted-ttf')
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ttfautohint

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Try to use previous stage cache
      - name: Download stage 1 build cache
        uses: actions/download-artifact@v4
        with:
          name: stage1-build-cache-${{ needs.setup.outputs.version }}
          path: ./
        continue-on-error: true

      # Stage-specific cache for hinted TTF artifacts
      - name: Cache build artifacts (Stage 2)
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-stage2-cache-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}-batch-${{ matrix.batch }}
          restore-keys: |
            ${{ runner.os }}-stage1-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}-batch-${{ matrix.batch }}
            ${{ runner.os }}-stage1-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}
            ${{ runner.os }}-stage2-cache-

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./
        continue-on-error: true

      - name: Build hinted TTF fonts in batch
        run: |
          # Check if matrix file exists
          if [ -f "font-batches.json" ]; then
            BATCH_FILE="font-batches.json"
          else
            echo "Error: No batch file found"
            echo "Looking for font-batches.json in current directory"
            ls -la font-*.json || echo "No font-*.json files found"
            exit 1
          fi

          # Read the batch information
          BATCH_DATA=$(cat "$BATCH_FILE" | jq ".[] | select(.batchId == ${{ matrix.batch }})")

          echo "Building Stage 2 - Hinted TTF (batch ${{ matrix.batch }})..."
          echo "$BATCH_DATA" | jq -r '.families[].family' | while read family; do
            echo "Building hinted TTF: $family"
            npm run build -- "ttf::$family"
          done

      - name: Upload hinted TTF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hinted-ttf-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/TTF/
          include-hidden-files: true

  # Stage 3: Build WOFF2
  build-woff2:
    name: Build WOFF2 (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-hinted-ttf]
    if: contains(fromJson(needs.setup.outputs.stages), 'woff2')
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Try to use previous stage cache
      - name: Download stage 1 build cache
        uses: actions/download-artifact@v4
        with:
          name: stage1-build-cache-${{ needs.setup.outputs.version }}
          path: ./
        continue-on-error: true

      # Stage-specific cache for WOFF2 artifacts
      - name: Cache build artifacts (Stage 3)
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            .build
            packages/*/lib
            packages/font-glyphs/src/**/*.mjs
            packages/font-otl/src/**/*.mjs
          key: ${{ runner.os }}-stage3-cache-${{ hashFiles('packages/**', 'verdafile.mjs', '*-build-plans.toml') }}-batch-${{ matrix.batch }}
          restore-keys: |
            ${{ runner.os }}-stage2-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}-batch-${{ matrix.batch }}
            ${{ runner.os }}-stage1-cache-${{ hashFiles('packages/**', 'verdafile.mjs') }}-batch-${{ matrix.batch }}
            ${{ runner.os }}-stage3-cache-

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./
        continue-on-error: true

      - name: Build WOFF2 fonts in batch
        run: |
          # Check if matrix file exists
          if [ -f "font-batches.json" ]; then
            BATCH_FILE="font-batches.json"
          else
            echo "Error: No batch file found"
            echo "Looking for font-batches.json in current directory"
            ls -la font-*.json || echo "No font-*.json files found"
            exit 1
          fi

          # Read the batch information
          BATCH_DATA=$(cat "$BATCH_FILE" | jq ".[] | select(.batchId == ${{ matrix.batch }})")

          echo "Building Stage 3 - WOFF2 (batch ${{ matrix.batch }})..."
          echo "$BATCH_DATA" | jq -r '.families[].family' | while read family; do
            echo "Building WOFF2: $family"
            npm run build -- "woff2::$family"
          done

      - name: Upload WOFF2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: woff2-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/WOFF2/
          include-hidden-files: true

  # Stage 4: Build WebFonts (CSS + WOFF2)
  build-webfont:
    name: Build WebFont (Batch ${{ matrix.batch }})
    runs-on: ubuntu-latest
    needs: [setup, build-woff2]
    if: contains(fromJson(needs.setup.outputs.stages), 'webfont')
    strategy:
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.batches) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Try to use previous stage cache
      - name: Download stage 1 build cache
        uses: actions/download-artifact@v4
        with:
          name: stage1-build-cache-${{ needs.setup.outputs.version }}
          path: ./
        continue-on-error: true

      - name: Install dependencies
        run: npm ci

      - name: Download matrix files
        uses: actions/download-artifact@v4
        with:
          name: build-matrix
          path: ./
        continue-on-error: true

      - name: Build WebFont CSS in batch
        run: |
          # Check if matrix file exists
          if [ -f "font-batches.json" ]; then
            BATCH_FILE="font-batches.json"
          else
            echo "Error: No batch file found"
            echo "Looking for font-batches.json in current directory"
            ls -la font-*.json || echo "No font-*.json files found"
            exit 1
          fi

          # Read the batch information
          BATCH_DATA=$(cat "$BATCH_FILE" | jq ".[] | select(.batchId == ${{ matrix.batch }})")

          echo "Building Stage 4 - WebFont CSS (batch ${{ matrix.batch }})..."
          echo "$BATCH_DATA" | jq -r '.families[].family' | while read family; do
            echo "Building WebFont: $family"
            npm run build -- "webfont::$family"
          done

      - name: Upload WebFont artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webfont-batch-${{ matrix.batch }}-${{ needs.setup.outputs.version }}
          path: |
            dist/*/WebFont/
          include-hidden-files: true

  # Collect and organize all stages by family
  collect-fonts:
    name: Collect Fonts (${{ matrix.family }})
    runs-on: ubuntu-latest
    needs: [setup, build-unhinted-ttf, build-hinted-ttf, build-woff2, build-webfont]
    if: always() && !cancelled()
    strategy:
      fail-fast: false
      matrix:
        family: ${{ fromJson(needs.setup.outputs.families) }}

    steps:
      - name: Download all font artifacts for family
        uses: actions/download-artifact@v4
        with:
          pattern: "*-batch-*-${{ needs.setup.outputs.version }}"
          path: all-artifacts/
          merge-multiple: true

      - name: Organize fonts by family and stage
        run: |
          mkdir -p final-dist/${{ matrix.family }}
          
          # Copy all artifacts for this family
          if [ -d "all-artifacts/dist/${{ matrix.family }}" ]; then
            cp -r all-artifacts/dist/${{ matrix.family }}/* final-dist/${{ matrix.family }}/
            echo "Organized artifacts for ${{ matrix.family }}:"
            find final-dist/${{ matrix.family }} -type f -name "*.ttf" -o -name "*.woff2" -o -name "*.css" | sort
          else
            echo "No artifacts found for ${{ matrix.family }}"
          fi

      - name: Upload family artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.family }}_${{ needs.setup.outputs.version }}
          path: final-dist/
          include-hidden-files: true

  # Patch fonts with NerdFonts (optional)
  patch-fonts:
    name: Patch Fonts (${{ matrix.family }})
    runs-on: ubuntu-latest
    needs: [setup, collect-fonts]
    if: always() && !cancelled()
    strategy:
      fail-fast: false
      matrix:
        family: ${{ fromJson(needs.setup.outputs.families) }}

    steps:
      - name: Download family fonts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.family }}_${{ needs.setup.outputs.version }}
          path: family-fonts/

      - name: Patch fonts with NerdFonts
        run: |
          mkdir -p patched-fonts
          
          # Find all TTF files for this family and patch them
          find family-fonts/ -name "*.ttf" -type f | while read -r font_file; do
            # Get the relative path
            rel_path="${font_file#family-fonts/}"
            # Create the output directory structure
            output_dir="patched-fonts/$(dirname "$rel_path")"
            mkdir -p "$output_dir"

            echo "Patching: $font_file"
            docker run --rm \
              -v "$PWD/family-fonts:/in:Z" \
              -v "$PWD/patched-fonts:/out:Z" \
              nerdfonts/patcher \
              --complete --careful \
              --outputdir "/out/$(dirname "$rel_path")" \
              "/in/$rel_path" || echo "Failed to patch $font_file, continuing..."
          done

      - name: Upload patched family artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.family }}_nerdfont_${{ needs.setup.outputs.version }}
          path: patched-fonts/
          include-hidden-files: true

  # Save build cache
  save-cache:
    name: Save Build Cache
    runs-on: ubuntu-latest
    needs: [setup, build-unhinted-ttf]
    if: >
      always() &&
      (github.event.inputs.save_cache == 'true' ||
       github.event_name == 'schedule')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download updated build cache
        uses: actions/download-artifact@v4
        with:
          name: stage1-build-cache-${{ needs.setup.outputs.version }}
          path: ./
        continue-on-error: true

      - name: Save build cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Saving build cache for future builds..."
          if [ -f ".github/scripts/manage-cache.sh" ]; then
            ./.github/scripts/manage-cache.sh save
          else
            echo "Cache management script not found"
          fi

      - name: Cleanup old cache files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cleaning up old cache files..."
          if [ -f ".github/scripts/manage-cache.sh" ]; then
            ./.github/scripts/manage-cache.sh cleanup
          else
            echo "Cache management script not found"
          fi

  # Create release with all fonts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup, collect-fonts, patch-fonts]
    if: always() && !cancelled()
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download all family artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*_${{ needs.setup.outputs.version }}"
          path: release-artifacts/

      - name: Create release summary
        run: |
          echo "# Otoshi Mono Font Release v${{ needs.setup.outputs.version }}" > release-notes.md
          echo "" >> release-notes.md
          echo "Multi-stage cached build completed with the following stages:" >> release-notes.md
          echo "${{ needs.setup.outputs.stages }}" | jq -r '.[]' | while read stage; do
            echo "- ✅ $stage" >> release-notes.md
          done
          echo "" >> release-notes.md
          echo "## Font Families" >> release-notes.md
          echo "${{ needs.setup.outputs.families }}" | jq -r '.[]' | while read family; do
            echo "- **$family**: Complete font family with all weights, widths, and slopes" >> release-notes.md
          done
          echo "" >> release-notes.md
          echo "## Build Information" >> release-notes.md
          echo "- Build cache used: ${{ needs.setup.outputs.cache_restored }}" >> release-notes.md
          echo "- Build stages: ${{ needs.setup.outputs.stages }}" >> release-notes.md
          echo "- Built from commit: ${{ github.sha }}" >> release-notes.md

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          name: Release v${{ needs.setup.outputs.version }}
          body_path: release-notes.md
          files: release-artifacts/**/*
          fail_on_unmatched_files: false
